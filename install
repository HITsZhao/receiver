#!/bin/bash

# Copyright (C) zhao

LC_ALL=C
export LC_ALL

if [ $UID -ne 0 ]; then
	echo "root user are required to run this script"
	exit 1;
fi

CURR_DIR=`pwd`
cd $CURR_DIR

. auto/options
. auto/sources
. auto/init

echo -e "begin to install nginx..."
cd $NGINX_SRC
echo "change into directory:"$NGINX_SRC
./configure --with-pcre=$PCRE_SRC --with-zlib=$ZLIB_SRC

if [ $? != 0 ]; then
	echo -e $TEST_FAIL"configure nginx failed"
	exit 1;
fi
echo -e $TEST_OK"configure nginx"

make

if [ $? != 0 ]; then
	echo -e $TEST_FAIL"make nginx failed"
	exit 1;
fi
echo -e $TEST_OK"make nginx"

make install

if [ $? != 0 ]; then
	echo -e $TEST_FAIL"install nginx failed"
	exit 1;
fi
echo -e $TEST_OK"install nginx"

cp -f $NGINX_CONF_SRC $NGINX_CONF_PATH
 
if [ $? != 0 ]; then
	echo -e $TEST_FAIL"deploy $NGINX_CONF_SRC"
	exit 1;
fi
echo -e $TEST_OK"deploy $NGINX_CONF_SRC"

echo -e "Try to start nginx: $NGINX_SBIN_PATH"

$NGINX_SBIN_PATH -t

if [ $? != 0 ]; then
	echo -e $TEST_FAIL"check nginx configuration: $NGINX_CONF_PATH"
	exit 1;
fi
echo -e $TEST_OK"start nginx; $NGINX_CONF_PATH"

$NGINX_SBIN_PATH

if [ $? != 0 ]; then
	echo -e $TEST_FAIL"start nginx: $NGINX_SBIN_PATH"
	exit 1;
fi
echo -e $TEST_OK"start nginx: $NGINX_SBIN_PATH"

cp -f $SSHD_CONF_SRC /etc/ssh/$SSHD_CONF

if [ $? != 0 ]; then
	echo -e $TEST_FAIL"set sshd configuration: $SSHD_CONF_SRC to /etc/ssh/$SSHD_CONF"
	exit 1;
fi
echo -e $TEST_OK"set sshd configuration: $NGINX_SBIN_PATH to /etc/ssh/$SSHD_CONF"

systemctl restart sshd

if [ $? != 0 ]; then
	echo -e $TEST_FAIL"restart sshd"
	exit 1;
fi
echo -e $TEST_OK"restart sshd"


crontask="01 00 * * * $CURR_DIR/src/logrotate"
cat << END  > $CURR_DIR/src/rotate.cron
$crontask
END
if [ $? != 0 ]; then
	echo -e $TEST_FAIL"create crontab file"
	exit 1;
fi
echo -e $TEST_OK"create crontab file"

crontab -r
crontab $CURR_DIR/src/rotate.cron
if [ $? != 0 ]; then
	echo -e $TEST_FAIL"submit crontab task"
	exit 1;
fi
echo -e $TEST_OK"submit crontab task"
cat $CURR_DIR/src/rotate.cron|awk '{print $6" task will be execute at "$2":"$1" every day"}'
echo -e $TEST_OK"done"
echo -e "[32m[important!!][0m please set password for user: [$NBPVG $NBPDOWN $NBPWWW] manually. " 


